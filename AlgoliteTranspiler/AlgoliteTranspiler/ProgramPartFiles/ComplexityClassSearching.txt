void findComplexityClass() {
    vector<pair<long long, double>> func;
    vector<pair<long long, double>> logarithmic_func;
    vector<pair<long long, double>> exponential_func;
    pair<double, double> params;
    int polynomial_degree, logarithmic_degree, exponential_degree, func_size, part, mod;
    double polynomial_error, logarithmic_error, exponential_error;

    int polynomial_error_increasings = 0;
    int logarithmic_error_increasings = 0;
    int exponential_error_increasings = 0;
    int polynomial_degree_changes = 0;
    int logarithmic_degree_changes = 0;
    int exponential_degree_changes = 0;
    double last_error = INFINITY;
    int last_degree = -1;
    const int PARTS_NUMBER = 10;
    complete_complexity_function = "";

    createComplexityFunc();
    
    func = func_vec;

    logarithmic_func = func;
    for (pair<long long, double>& element : logarithmic_func) {
        element.second /= log10(element.first);
    }

    exponential_func = func;

    deleteOverflowing(func_vec);
    deleteOverflowing(func);

    func_size = func.size();
    part = func_size / PARTS_NUMBER;
    mod = func_size - part * PARTS_NUMBER;

    for (int i = part + mod; i < func_size; i += part) {
        vector<pair<long long, double>> current_func(func.begin(), func.begin() + i);
        params = linearRegression(current_func, true, true);

        double current_error = params.first;
        int current_degree = round(abs(params.second));

        if (current_error > last_error * 1.1)
            polynomial_error_increasings++;
        last_error = current_error;

        if (current_degree != last_degree)
            polynomial_degree_changes++;
        last_degree = current_degree;
    }  

    polynomial_error = last_error;
    polynomial_degree = last_degree;

    last_error = INFINITY;
    last_degree = -1;

    deleteOverflowing(logarithmic_func);

    func_size = logarithmic_func.size();
    part = func_size / PARTS_NUMBER;
    mod = func_size - part * PARTS_NUMBER;

    for (int i = part + mod; i < func_size; i += part) {
        vector<pair<long long, double>> current_func(logarithmic_func.begin(), logarithmic_func.begin() + i);
        params = linearRegression(current_func, true, true);

        double current_error = params.first;
        int current_degree = round(abs(params.second));

        if (current_error > last_error * 1.1)
            logarithmic_error_increasings++;
        last_error = current_error;

        if (current_degree != last_degree)
            logarithmic_degree_changes++;
        last_degree = current_degree;   
    }

    logarithmic_error = last_error;
    logarithmic_degree = last_degree;

    last_error = INFINITY;
    last_degree = -1;

    deleteOverflowing(exponential_func);

    func_size = exponential_func.size();
    part = func_size / PARTS_NUMBER;
    mod = func_size - part * PARTS_NUMBER;

    for (int i = part + mod; i < func_size; i += part) {
        vector<pair<long long, double>> current_func(exponential_func.begin(), exponential_func.begin() + i);
        params = linearRegression(current_func, false, true);

        double current_error = params.first;
        int current_degree = round(abs(params.second));

        if (current_error > last_error * 1.1)
            exponential_error_increasings++;
        last_error = current_error;

        if (current_degree != last_degree)
            exponential_degree_changes++;
        last_degree = current_degree;
    }

    exponential_error = last_error;
    exponential_degree = last_degree;

    bool class_is_unknown = false;

    complexity_class = "O(";

    if (polynomial_error < logarithmic_error && polynomial_error < exponential_error) {
        if ((polynomial_error_increasings <= PARTS_NUMBER / 2 || polynomial_error < 1e-04) && polynomial_degree_changes < 5) {
            if (polynomial_degree != 0) {
                complexity_class += "x";
                if (polynomial_degree > 1 && polynomial_degree <= 5)
                    complexity_class += "^" + to_string(polynomial_degree);
                else if (polynomial_degree > 5)
                    complexity_class = "> " + complexity_class + "^5";
            }
            else
                complexity_class += "1";
            complete_complexity_function = "; " + polynomialComplexityFunction(polynomial_degree, func_vec);
        }
        else
            class_is_unknown = true;
    }
    else if (logarithmic_error < polynomial_error && logarithmic_error < exponential_error) {
        if ((logarithmic_error_increasings <= PARTS_NUMBER / 2 || logarithmic_error < 1e-04) && logarithmic_degree_changes < 5) {
            if (logarithmic_degree != 0) {
                complexity_class += "x";
                if (logarithmic_degree > 1 && logarithmic_degree <= 5)
                    complexity_class += "^" + to_string(logarithmic_degree);
                else if (logarithmic_degree > 5)
                    complexity_class = "> " + complexity_class + "^5";
                complexity_class += " * ";
            }
            complexity_class += "log(x)";
        }
        else
            class_is_unknown = true;
    }
    else if (exponential_error <= polynomial_error && exponential_error <= logarithmic_error) {
        if ((exponential_error_increasings <= PARTS_NUMBER / 2 || exponential_error < 1e-04) && exponential_degree_changes < 5) {
            if (exponential_degree != 0) {
                complexity_class += "e^";
                if (exponential_degree > 1)
                    complexity_class += "(" + to_string(exponential_degree) + "x)";
                else
                    complexity_class += "x";
            }
            else
                complexity_class += "1";
        }
        else
            class_is_unknown = true;
    }
    else
        class_is_unknown = true;

    complexity_class += ")" + complete_complexity_function;

    if (class_is_unknown)
        complexity_class = "Unknown";

    w = wstring(complexity_class.begin(), complexity_class.end());
    graph_title = w.c_str();

}