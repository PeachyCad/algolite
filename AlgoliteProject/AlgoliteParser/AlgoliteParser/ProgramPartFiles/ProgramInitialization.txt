#include "pbPlots.hpp"
#include "supportLib.hpp"
#include <vector>
#include <cmath>
#include <iostream>
#include <limits>
#include <string>
#define LLONG_MAX numeric_limits<long long>().max()

using namespace std;

vector<double> xs;
vector<double> ys;
vector<double> xs1;
vector<double> ys1;
string complexity_class;
const wchar_t* graph_title;
wstring w;

pair<double, double> linearRegression(vector<pair<long long, double>> func) {
    double error = 0;
    long long n = func.size();
    double a;
    double b;

    double v_sum = 0;
    double u_sum = 0;
    double vu_sum = 0;
    double vv_sum = 0;

    for (long long i = 0; i < n; i++) {

        double v = log10(func[i].first);
        double u = log10(func[i].second);

        v_sum += v;
        u_sum += u;
        vu_sum += v * u;
        vv_sum += v * v;
    }

    b = (n * vu_sum - v_sum * u_sum) / (n * vv_sum - v_sum * v_sum);
    a = (u_sum - b * v_sum) / n;

    for (long long i = 0; i < n; i++) {
        double v = log10(func[i].first);
        double u = log10(func[i].second);

        double estimated_u = a + b * v;
        error += (estimated_u - u) * (estimated_u - u);
    }

    error /= n;
    return make_pair(error, b);
}

void deleteOverflowing(vector<pair<long long, double>>& func) {
    for (auto points_pair = func.begin(); points_pair != func.end(); points_pair++) {
        if ((*points_pair).second > 0.6 * LLONG_MAX || (*points_pair).second < 0.0) {
            func.erase(points_pair, func.end());
            break;
        }
    }
}

